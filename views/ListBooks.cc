//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "ListBooks.h"
#include <drogon/utils/OStringStream.h>
#include <drogon/utils/Utilities.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>

#include "../models/Books.h"
#include <exception>
#include <map>

using namespace drogon_model::library;
using namespace drogon::orm;

using namespace drogon;
std::string ListBooks::genText(const DrTemplateData& ListBooks_view_data)
{
	drogon::OStringStream ListBooks_tmp_stream;
	std::string layoutName{""};
  auto books = ListBooks_view_data.get<std::vector<Books>>("books");
  auto bookTypesMap = ListBooks_view_data.get<std::map<int32_t, std::string>>("bookTypesMap");
	ListBooks_tmp_stream << "<html lang=\"ru-RU\">\n";
ListBooks_tmp_stream<<"\n";
	ListBooks_tmp_stream << "  <head>\n";
	ListBooks_tmp_stream << "    <meta charset=\"utf-8\">\n";
	ListBooks_tmp_stream << "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n";
	ListBooks_tmp_stream << "    <title>";
{
    auto & val=ListBooks_view_data["title"];
    if(val.type()==typeid(const char *)){
        ListBooks_tmp_stream<<*(std::any_cast<const char *>(&val));
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        ListBooks_tmp_stream<<*(std::any_cast<const std::string>(&val));
    }
}
	ListBooks_tmp_stream << "</title>\n";
	ListBooks_tmp_stream << "  </head>\n";
ListBooks_tmp_stream<<"\n";
	ListBooks_tmp_stream << "  <body>\n";
	ListBooks_tmp_stream << "    <table class=\"table\">\n";
	ListBooks_tmp_stream << "      <thead>\n";
	ListBooks_tmp_stream << "        <tr>\n";
	ListBooks_tmp_stream << "          <th align='left'>ID</th>\n";
	ListBooks_tmp_stream << "          <th align='left' width='30%'>Название Книги</th>\n";
	ListBooks_tmp_stream << "          <th align='left' width='20%'>Автор</th>\n";
	ListBooks_tmp_stream << "          <th align='left' width='20%'>К-во доступных книг</th>\n";
	ListBooks_tmp_stream << "          <th align='left' width='20%'>Тип</th>\n";
	ListBooks_tmp_stream << "        </tr>\n";
	ListBooks_tmp_stream << "      </thead>\n";
	ListBooks_tmp_stream << "      <tbody>\n";
	ListBooks_tmp_stream << "          \n";
	ListBooks_tmp_stream << "  ";
 for(auto iter : books) { 
	ListBooks_tmp_stream << "        <tr>\n";
	ListBooks_tmp_stream << "            <td>";
ListBooks_tmp_stream<<*iter.getBookNum();
	ListBooks_tmp_stream << "</td>\n";
	ListBooks_tmp_stream << "            <td>";
ListBooks_tmp_stream<<*iter.getBookName();
	ListBooks_tmp_stream << "</td>\n";
	ListBooks_tmp_stream << "            <td>";
ListBooks_tmp_stream<<*iter.getBookAuthor();
	ListBooks_tmp_stream << "</td>\n";
	ListBooks_tmp_stream << "            <td><a href=\"/book_detail?book_id=";
ListBooks_tmp_stream<<*iter.getBookCount();
	ListBooks_tmp_stream << "\" target=\"_blank\">";
ListBooks_tmp_stream<<*iter.getBookCount();
	ListBooks_tmp_stream << "</a></td>\n";
	ListBooks_tmp_stream << "            <td>";
ListBooks_tmp_stream<<bookTypesMap[*iter.getTypeId()];
	ListBooks_tmp_stream << "</td>\n";
	ListBooks_tmp_stream << "        </tr>\n";
	ListBooks_tmp_stream << "  ";
 } 
	ListBooks_tmp_stream << "      </tbody>\n";
	ListBooks_tmp_stream << "    </table>\n";
	ListBooks_tmp_stream << "  </body>\n";
ListBooks_tmp_stream<<"\n";
	ListBooks_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(ListBooks_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = ListBooks_view_data;
auto str = std::move(ListBooks_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
