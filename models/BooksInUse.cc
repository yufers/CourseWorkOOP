/**
 *
 *  BooksInUse.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "BooksInUse.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::library;

const std::string BooksInUse::primaryKeyName = "book_in_use_num";
const bool BooksInUse::hasPrimaryKey = true;
const std::string BooksInUse::tableName = "\"books_in_use\"";

const std::vector<typename BooksInUse::MetaData> BooksInUse::metaData_={
};
const std::string &BooksInUse::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
BooksInUse::BooksInUse(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 0 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
    }

}

BooksInUse::BooksInUse(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 0)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
}

BooksInUse::BooksInUse(const Json::Value &pJson) noexcept(false)
{
}

void BooksInUse::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 0)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
}

void BooksInUse::updateByJson(const Json::Value &pJson) noexcept(false)
{
}

void BooksInUse::updateId(const uint64_t id)
{
}

const std::vector<std::string> &BooksInUse::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
    };
    return inCols;
}

void BooksInUse::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
}

const std::vector<std::string> BooksInUse::updateColumns() const
{
    std::vector<std::string> ret;
    return ret;
}

void BooksInUse::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
}
Json::Value BooksInUse::toJson() const
{
    Json::Value ret;
    return ret;
}

Json::Value BooksInUse::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 0)
    {
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    return ret;
}

bool BooksInUse::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    return true;
}
bool BooksInUse::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 0)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool BooksInUse::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    return true;
}
bool BooksInUse::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 0)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool BooksInUse::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
